// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview An AI agent that prioritizes tasks based on deadlines, importance, and predicted effort.
 *
 * - prioritizeTasks - A function that handles the task prioritization process.
 * - Task - The input type for the prioritizeTasks function.
 * - PrioritizedTask - The return type for the prioritizeTasks function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const TaskSchema = z.object({
  title: z.string().describe('The title of the task.'),
  description: z.string().describe('A detailed description of the task.'),
  deadline: z.string().describe('The deadline for the task, in ISO format.'),
  importance: z.enum(['high', 'medium', 'low']).describe('The importance of the task.'),
  predictedEffort: z.string().describe('The predicted effort to complete the task, e.g., "2 hours", "1 day", etc.'),
});

export type Task = z.infer<typeof TaskSchema>;

const PrioritizedTaskSchema = TaskSchema.extend({
  priorityScore: z.number().describe('A numerical score representing the priority of the task. Higher score means higher priority.'),
  reasoning: z.string().describe('Explanation for how the priority score was assigned.'),
});

export type PrioritizedTask = z.infer<typeof PrioritizedTaskSchema>;

const PrioritizeTasksInputSchema = z.array(TaskSchema);
export type PrioritizeTasksInput = z.infer<typeof PrioritizeTasksInputSchema>;

const PrioritizeTasksOutputSchema = z.array(PrioritizedTaskSchema);
export type PrioritizeTasksOutput = z.infer<typeof PrioritizeTasksOutputSchema>;

export async function prioritizeTasks(tasks: PrioritizeTasksInput): Promise<PrioritizeTasksOutput> {
  return prioritizeTasksFlow(tasks);
}

const prompt = ai.definePrompt({
  name: 'prioritizeTasksPrompt',
  input: {schema: PrioritizeTasksInputSchema},
  output: {schema: PrioritizeTasksOutputSchema},
  prompt: `You are an AI task prioritization expert. Given a list of tasks, you will analyze each task based on its deadline, importance, and predicted effort, and assign a priority score and reasoning for each task.

Tasks:
{{#each this}}
- Title: {{title}}
  Description: {{description}}
  Deadline: {{deadline}}
  Importance: {{importance}}
  Predicted Effort: {{predictedEffort}}
{{/each}}

For each task, calculate a priority score between 0 and 100. Higher score indicates higher priority. Consider the following factors when assigning the score:
- **Deadline**: Tasks with closer deadlines should have higher priority.
- **Importance**: High importance tasks should have higher priority.
- **Predicted Effort**: Tasks with shorter predicted effort should be prioritized before longer effort ones, assuming other factors are equal.

Return the tasks with their priority scores and reasoning. Respond in JSON format.
`,
});

const prioritizeTasksFlow = ai.defineFlow(
  {
    name: 'prioritizeTasksFlow',
    inputSchema: PrioritizeTasksInputSchema,
    outputSchema: PrioritizeTasksOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
